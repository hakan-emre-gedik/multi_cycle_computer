// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/27/2022 03:25:31"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          register_file
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module register_file_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] A_1;
reg [2:0] A_2;
reg [2:0] A_3;
reg [7:0] R7;
reg [7:0] WD3;
reg clk;
reg reset;
reg wen;
// wires                                               
wire [7:0] RD1;
wire [7:0] RD2;

// assign statements (if any)                          
register_file i1 (
// port map - connection between master ports and signals/registers   
	.A_1(A_1),
	.A_2(A_2),
	.A_3(A_3),
	.R7(R7),
	.RD1(RD1),
	.RD2(RD2),
	.WD3(WD3),
	.clk(clk),
	.reset(reset),
	.wen(wen)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 
// WD3[ 7 ]
initial
begin
	WD3[7] = 1'b0;
end 
// WD3[ 6 ]
initial
begin
	WD3[6] = 1'b0;
end 
// WD3[ 5 ]
initial
begin
	WD3[5] = 1'b0;
	WD3[5] = #640000 1'b1;
end 
// WD3[ 4 ]
initial
begin
	WD3[4] = 1'b0;
	WD3[4] = #330000 1'b1;
	WD3[4] = #310000 1'b0;
	WD3[4] = #320000 1'b1;
end 
// WD3[ 3 ]
initial
begin
	WD3[3] = 1'b0;
	WD3[3] = #170000 1'b1;
	WD3[3] = #160000 1'b0;
	WD3[3] = #160000 1'b1;
	WD3[3] = #150000 1'b0;
	WD3[3] = #160000 1'b1;
	WD3[3] = #160000 1'b0;
end 
// WD3[ 2 ]
initial
begin
	WD3[2] = 1'b0;
	WD3[2] = #90000 1'b1;
	# 80000;
	repeat(2)
	begin
		WD3[2] = 1'b0;
		WD3[2] = #80000 1'b1;
		# 80000;
	end
	WD3[2] = 1'b0;
	WD3[2] = #70000 1'b1;
	# 80000;
	repeat(2)
	begin
		WD3[2] = 1'b0;
		WD3[2] = #80000 1'b1;
		# 80000;
	end
	WD3[2] = 1'b0;
end 
// WD3[ 1 ]
initial
begin
	WD3[1] = 1'b0;
	WD3[1] = #50000 1'b1;
	# 40000;
	repeat(5)
	begin
		WD3[1] = 1'b0;
		WD3[1] = #40000 1'b1;
		# 40000;
	end
	WD3[1] = 1'b0;
	WD3[1] = #30000 1'b1;
	# 40000;
	repeat(5)
	begin
		WD3[1] = 1'b0;
		WD3[1] = #40000 1'b1;
		# 40000;
	end
	WD3[1] = 1'b0;
end 
// WD3[ 0 ]
initial
begin
	WD3[0] = 1'b0;
	WD3[0] = #30000 1'b1;
	# 20000;
	repeat(11)
	begin
		WD3[0] = 1'b0;
		WD3[0] = #20000 1'b1;
		# 20000;
	end
	WD3[0] = 1'b0;
	WD3[0] = #10000 1'b1;
	# 20000;
	repeat(12)
	begin
		WD3[0] = 1'b0;
		WD3[0] = #20000 1'b1;
		# 20000;
	end
end 
// A_1[ 2 ]
initial
begin
	A_1[2] = 1'b0;
	A_1[2] = #570000 1'b1;
	# 80000;
	repeat(2)
	begin
		A_1[2] = 1'b0;
		A_1[2] = #80000 1'b1;
		# 80000;
	end
	A_1[2] = 1'b0;
end 
// A_1[ 1 ]
initial
begin
	A_1[1] = 1'b0;
	A_1[1] = #530000 1'b1;
	# 40000;
	repeat(5)
	begin
		A_1[1] = 1'b0;
		A_1[1] = #40000 1'b1;
		# 40000;
	end
	A_1[1] = 1'b0;
end 
// A_1[ 0 ]
initial
begin
	A_1[0] = 1'b0;
	A_1[0] = #510000 1'b1;
	# 20000;
	repeat(11)
	begin
		A_1[0] = 1'b0;
		A_1[0] = #20000 1'b1;
		# 20000;
	end
	A_1[0] = 1'b0;
	A_1[0] = #20000 1'b1;
end 
// A_2[ 2 ]
initial
begin
	A_2[2] = 1'b0;
	A_2[2] = #570000 1'b1;
	# 80000;
	repeat(2)
	begin
		A_2[2] = 1'b0;
		A_2[2] = #80000 1'b1;
		# 80000;
	end
	A_2[2] = 1'b0;
end 
// A_2[ 1 ]
initial
begin
	A_2[1] = 1'b0;
	A_2[1] = #530000 1'b1;
	# 40000;
	repeat(5)
	begin
		A_2[1] = 1'b0;
		A_2[1] = #40000 1'b1;
		# 40000;
	end
	A_2[1] = 1'b0;
end 
// A_2[ 0 ]
initial
begin
	A_2[0] = 1'b0;
	A_2[0] = #510000 1'b1;
	# 20000;
	repeat(11)
	begin
		A_2[0] = 1'b0;
		A_2[0] = #20000 1'b1;
		# 20000;
	end
	A_2[0] = 1'b0;
	A_2[0] = #20000 1'b1;
end 
// A_3[ 2 ]
initial
begin
	repeat(3)
	begin
		A_3[2] = 1'b0;
		A_3[2] = #160000 1'b1;
		# 160000;
	end
	A_3[2] = 1'b0;
end 
// A_3[ 1 ]
initial
begin
	repeat(6)
	begin
		A_3[1] = 1'b0;
		A_3[1] = #80000 1'b1;
		# 80000;
	end
	A_3[1] = 1'b0;
end 
// A_3[ 0 ]
initial
begin
	repeat(12)
	begin
		A_3[0] = 1'b0;
		A_3[0] = #40000 1'b1;
		# 40000;
	end
	A_3[0] = 1'b0;
end 
// R7[ 7 ]
initial
begin
	R7[7] = 1'b0;
end 
// R7[ 6 ]
initial
begin
	R7[6] = 1'b0;
end 
// R7[ 5 ]
initial
begin
	R7[5] = 1'b0;
end 
// R7[ 4 ]
initial
begin
	R7[4] = 1'b0;
end 
// R7[ 3 ]
initial
begin
	R7[3] = 1'b0;
end 
// R7[ 2 ]
initial
begin
	R7[2] = 1'b0;
end 
// R7[ 1 ]
initial
begin
	R7[1] = 1'b0;
end 
// R7[ 0 ]
initial
begin
	R7[0] = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// wen
initial
begin
	wen = 1'b1;
	wen = #320000 1'b0;
end 
endmodule


// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/27/2022 02:33:12"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          barrel_shifter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module barrel_shifter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] data_in;
reg [4:0] shamt;
reg [2:0] shift_type;
// wires                                               
wire [7:0] data_out;

// assign statements (if any)                          
barrel_shifter i1 (
// port map - connection between master ports and signals/registers   
	.data_in(data_in),
	.data_out(data_out),
	.shamt(shamt),
	.shift_type(shift_type)
);
initial 
begin 
#1000000 $finish;
end 
// data_in[ 7 ]
initial
begin
	data_in[7] = 1'b1;
	data_in[7] = #50000 1'b0;
	data_in[7] = #100000 1'b1;
	data_in[7] = #250000 1'b0;
	data_in[7] = #50000 1'b1;
	data_in[7] = #50000 1'b0;
	data_in[7] = #150000 1'b1;
	data_in[7] = #100000 1'b0;
	data_in[7] = #100000 1'b1;
end 
// data_in[ 6 ]
initial
begin
	data_in[6] = 1'b0;
	data_in[6] = #50000 1'b1;
	data_in[6] = #50000 1'b0;
	data_in[6] = #50000 1'b1;
	data_in[6] = #100000 1'b0;
	data_in[6] = #50000 1'b1;
	data_in[6] = #100000 1'b0;
	data_in[6] = #100000 1'b1;
	data_in[6] = #200000 1'b0;
	data_in[6] = #50000 1'b1;
	data_in[6] = #50000 1'b0;
	data_in[6] = #50000 1'b1;
	data_in[6] = #100000 1'b0;
end 
// data_in[ 5 ]
initial
begin
	data_in[5] = 1'b1;
	data_in[5] = #50000 1'b0;
	data_in[5] = #50000 1'b1;
	data_in[5] = #150000 1'b0;
	data_in[5] = #150000 1'b1;
	data_in[5] = #50000 1'b0;
	data_in[5] = #150000 1'b1;
	data_in[5] = #200000 1'b0;
end 
// data_in[ 4 ]
initial
begin
	data_in[4] = 1'b1;
	data_in[4] = #150000 1'b0;
	data_in[4] = #200000 1'b1;
	data_in[4] = #50000 1'b0;
	data_in[4] = #50000 1'b1;
	data_in[4] = #100000 1'b0;
	data_in[4] = #100000 1'b1;
	data_in[4] = #50000 1'b0;
	data_in[4] = #50000 1'b1;
	data_in[4] = #50000 1'b0;
	data_in[4] = #100000 1'b1;
	data_in[4] = #50000 1'b0;
end 
// data_in[ 3 ]
initial
begin
	data_in[3] = 1'b1;
	data_in[3] = #100000 1'b0;
	data_in[3] = #200000 1'b1;
	data_in[3] = #50000 1'b0;
	data_in[3] = #100000 1'b1;
	data_in[3] = #100000 1'b0;
	data_in[3] = #100000 1'b1;
	data_in[3] = #50000 1'b0;
	data_in[3] = #150000 1'b1;
	data_in[3] = #50000 1'b0;
end 
// data_in[ 2 ]
initial
begin
	data_in[2] = 1'b1;
	data_in[2] = #50000 1'b0;
	data_in[2] = #100000 1'b1;
	data_in[2] = #50000 1'b0;
	data_in[2] = #100000 1'b1;
	data_in[2] = #250000 1'b0;
	data_in[2] = #200000 1'b1;
	data_in[2] = #50000 1'b0;
	data_in[2] = #50000 1'b1;
end 
// data_in[ 1 ]
initial
begin
	data_in[1] = 1'b0;
	data_in[1] = #50000 1'b1;
	data_in[1] = #100000 1'b0;
	data_in[1] = #50000 1'b1;
	data_in[1] = #250000 1'b0;
	data_in[1] = #150000 1'b1;
	data_in[1] = #50000 1'b0;
	data_in[1] = #50000 1'b1;
	data_in[1] = #150000 1'b0;
	data_in[1] = #100000 1'b1;
end 
// data_in[ 0 ]
initial
begin
	data_in[0] = 1'b1;
	data_in[0] = #150000 1'b0;
	data_in[0] = #150000 1'b1;
	data_in[0] = #100000 1'b0;
	data_in[0] = #150000 1'b1;
	data_in[0] = #100000 1'b0;
	data_in[0] = #150000 1'b1;
	data_in[0] = #100000 1'b0;
end 
// shamt[ 4 ]
initial
begin
	shamt[4] = 1'b0;
	shamt[4] = #320000 1'b1;
	shamt[4] = #320000 1'b0;
	shamt[4] = #320000 1'b1;
end 
// shamt[ 3 ]
initial
begin
	repeat(3)
	begin
		shamt[3] = 1'b0;
		shamt[3] = #160000 1'b1;
		# 160000;
	end
	shamt[3] = 1'b0;
end 
// shamt[ 2 ]
initial
begin
	repeat(6)
	begin
		shamt[2] = 1'b0;
		shamt[2] = #80000 1'b1;
		# 80000;
	end
	shamt[2] = 1'b0;
end 
// shamt[ 1 ]
initial
begin
	repeat(12)
	begin
		shamt[1] = 1'b0;
		shamt[1] = #40000 1'b1;
		# 40000;
	end
	shamt[1] = 1'b0;
end 
// shamt[ 0 ]
always
begin
	shamt[0] = 1'b0;
	shamt[0] = #20000 1'b1;
	#20000;
end 
// shift_type[ 2 ]
initial
begin
	repeat(6)
	begin
		shift_type[2] = 1'b0;
		shift_type[2] = #80000 1'b1;
		# 80000;
	end
	shift_type[2] = 1'b0;
end 
// shift_type[ 1 ]
initial
begin
	repeat(12)
	begin
		shift_type[1] = 1'b0;
		shift_type[1] = #40000 1'b1;
		# 40000;
	end
	shift_type[1] = 1'b0;
end 
// shift_type[ 0 ]
always
begin
	shift_type[0] = 1'b0;
	shift_type[0] = #20000 1'b1;
	#20000;
end 
endmodule

